// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exercise1.Migrations
{
    [DbContext(typeof(ScoreContext))]
    [Migration("20240117114915_updateDBtosave")]
    partial class updateDBtosave
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Exercise1.Entity.SchoolYear", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExamYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusSchoolYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SchoolYear");
                });

            modelBuilder.Entity("Exercise1.Entity.Score", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("biology")
                        .HasColumnType("float");

                    b.Property<double>("chemistry")
                        .HasColumnType("float");

                    b.Property<double>("civic_education")
                        .HasColumnType("float");

                    b.Property<double>("english")
                        .HasColumnType("float");

                    b.Property<double>("geography")
                        .HasColumnType("float");

                    b.Property<double>("history")
                        .HasColumnType("float");

                    b.Property<double>("literature")
                        .HasColumnType("float");

                    b.Property<double>("mathematics")
                        .HasColumnType("float");

                    b.Property<double>("physics")
                        .HasColumnType("float");

                    b.Property<string>("province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("student_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Score");
                });

            modelBuilder.Entity("Exercise1.Entity.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchoolYearId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusStudent")
                        .HasColumnType("int");

                    b.Property<string>("StudentCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Exercise1.Entity.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Exercise1.Entity.Student", b =>
                {
                    b.HasOne("Exercise1.Entity.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId");

                    b.Navigation("SchoolYear");
                });
#pragma warning restore 612, 618
        }
    }
}
